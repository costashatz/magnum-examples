/*
    This file is part of Magnum.

    Copyright © 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018
              Vladimír Vondruš <mosra@centrum.cz>

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

namespace Magnum {
/** @page examples-textured-triangle Textured triangle
@brief Importing image data, texturing and custom shaders.

@tableofcontents
@m_footernavigation

@image html textured-triangle.png

This example extends the basic @ref examples-triangle "Triangle example" with
these features:

-   Working with textures and using plugin manager for importing TGA image
    data.
-   Creating custom shaders.
-   Storing resources in the executable, so they don't have to be carried as
    separate files along the application.

@m_div{m-button m-primary} <a href="http://magnum.graphics/showcase/textured-triangle/">@m_div{m-big}Live web demo @m_enddiv @m_div{m-small} uses WebAssembly & WebGL @m_enddiv </a> @m_enddiv

@section examples-textured-triangle-skeleton Basic skeleton

Compared to the original triangle example, we need extra includes for loading
image data  using a plugin and uploading them to a texture:

@dontinclude textured-triangle/TexturedTriangleExample.cpp
@skip #include
@until configure.h

The basic skeleton of main example class is similar to the original, except for
a custom shader and added @ref Texture2D.

@skip class TexturedTriangle
@until };

@section examples-textured-triangle-shader Textured triangle shader

Let's start with the shader. It's practically a simplified version of textured
@ref Shaders::Flat2D, written for OpenGL 3.3 without bothering about backwards
compatibility. The shader takes 2D vertex position and 2D texture coordinates.
We declare both attributes as @ref Vector2; assign vertex position to location
zero and texture coordinates to location one. The locations can be chosen
pretty arbitrarily, but location zero should be always occupied. It's also good
to make attribute declarations compatible between shaders so you can use a mesh
configured for one shader with another shader.

Next to these two attributes it also needs a uniform for the base color and a
texture binding. We will provide convenience public API for setting these two
parameters. Good practice is to allow @ref method-chaining "method chaining" on
them.

@dontinclude textured-triangle/TexturedTriangleShader.h
@skip class TexturedTriangleShader
@until };
@until };

We store GLSL sources as compiled-in resources because that's the most
convenient way --- by storing them in a string directly in the source we would
lose syntax highlighting and line numbering in case the GLSL compiler fails
with an error, whereas by storing them as separate files we would need to carry
these along the executable. The resource data will be compiled into the binary
using CMake later. You can read more about compiled-in resources in Corrade's
@ref resource-management "resource management tutorial".

In the constructor we load the GLSL sources from compiled-in resources, compile
and attach them and link the program together. Note that we explicitly check
for compilation and link status --- it's better to exit the program immediately
instead of leaving it in some unexpected state. We then retrieve location for
the base color uniform. Then we set the texture layer uniform to fixed value,
so it doesn't have to be set manually when using the shader for rendering. We
require OpenGL 3.3 in the shader, so the attribute locations can be conveniently set
@ref AbstractShaderProgram-attribute-location "directly in the shader source".
With newer OpenGL versions we could also explicitly set uniform locations and
texture layers itself, see @ref AbstractShaderProgram-uniform-location and
@ref AbstractShaderProgram-texture-units. However, in this example we will keep
compatibility with OpenGL 3.3.

@dontinclude textured-triangle/TexturedTriangleShader.cpp
@skip TexturedTriangleShader::TexturedTriangleShader
@until }
@until }
@until }
@until }
@until }
@until }

The `TexturedTriangleShader.vert` shader just sets the position and passes
texture coordinates through to fragment shader. Note the explicit attribute
locations:

@dontinclude textured-triangle/TexturedTriangleShader.vert
@skip layout
@until }

`TexturedTriangleShader.frag` loads color from the texture and multiplies it
with color we specified in the uniform:

@dontinclude textured-triangle/TexturedTriangleShader.frag
@skip uniform
@until }

@section examples-textured-triangle-setup Setting up the mesh and texture

As specified in the shader above, we use @ref Vector2 for both 2D vertex
positions and 2D texture coordinates:

@dontinclude textured-triangle/TexturedTriangleExample.cpp
@skip TexturedTriangleExample::TexturedTriangleExample
@until };
@until };

We then fill the buffer, configure mesh primitive and vertex count and specify
attribute locations in the buffer for use with our shader:

@skipline _buffer
@until addVertexBuffer
@until }
@until }

Now we will instantiate the plugin manager and try to load the
@ref Trade::TgaImporter "TgaImporter" plugin. If the plugin cannot be loaded,
we exit immediately. You can read more about plugin directory locations and
plugin loading in @ref plugins.

@dontinclude textured-triangle/TexturedTriangleExample.cpp
@skip PluginManager::Manager
@until manager.loadAndInstantiate
@until exit

Now we need to load the texture. Similarly to shader sources, the texture is
also stored as resource in the executable.

@dontinclude textured-triangle/TexturedTriangleExample.cpp
@skip Utility::Resource
@until }
@until exit

After the image is loaded, we create a texture from it. Note that we have to
explicitly set all required texture parameters, otherwise the texture will be
incomplete.

@skip Containers::Optional<Trade::ImageData2D>
@until }
@until }

The drawing function is again fairly simple. We clear the buffer, set base
color to light red, set the texture and perform the drawing. Last thing is
again buffer swap.

@skip TexturedTriangleExample::drawEvent
@until }
@until }

And, don't forget the main function:

@code{.cpp}
MAGNUM_APPLICATION_MAIN(TexturedTriangleExample)
@endcode

@section examples-textured-triangle-compilation Compilation

Compilation is not as straightforward as in previous example, because we need
to query directory with importer plugins and compile the resources into
executable. In addition to `CMakeLists.txt` we need two additonal files, one
for specifying plugin directory and one for compiling the resources.

The `configure.h.cmake` file contains input for `configure.h` header which will
contain proper value for `MAGNUM_PLUGINS_IMPORTER_DIR`. CMake will replace
`${MAGNUM_PLUGINS_IMPORTER_DIR}` or `${MAGNUM_PLUGINS_IMPORTER_DEBUG_DIR}` with
path gathered when looking for Magnum. Again, see @ref plugins for more
detailed information about plugin directories.

@dontinclude textured-triangle/configure.h.cmake
@skip #ifdef CORRADE_IS_DEBUG_BUILD
@until #endif

The `resources.conf` file lists all resources which need to be compiled into
the executable --- that is our GLSL shader sources and the texture image. All
resource groups need to have unique identifier by which they are accessed, we
will use `textured-triangle-data` as above. As said above, the resource
compilation process is explained thoroughly in Corrade's
@ref resource-management "resource management tutorial".

@include textured-triangle/resources.conf

In the `CMakeLists.txt` file first we find required Magnum package.

@dontinclude textured-triangle/CMakeLists.txt
@skip find_package
@until set_directory_properties

We then process the configuration file with CMake:

@dontinclude textured-triangle/CMakeLists.txt
@skip configure_file
@until ${CMAKE_CURRENT_BINARY_DIR}/configure.h

Now we compile the resources into the executable using the
@ref corrade-cmake-add-resource "corrade_add_resource()" macro, then we create
an executable from the result and other source files. We also need to include
current binary dir, because it will contain our generated `configure.h`. Last
step is linking, the same as previously.

@dontinclude textured-triangle/CMakeLists.txt
@skip corrade_add_resource
@until Magnum::Magnum)

You can now try playing around with the shader source, modifying texture
coordinates or adding other effects. The full file content is linked below.
Full source code is also available in the
[magnum-examples GitHub repository](https://github.com/mosra/magnum-examples/tree/master/src/textured-triangle).

-   @ref textured-triangle/CMakeLists.txt "CMakeLists.txt"
-   @ref textured-triangle/configure.h.cmake "configure.h.cmake"
-   @ref textured-triangle/resources.conf "resources.conf"
-   @ref textured-triangle/TexturedTriangleExample.cpp "TexturedTriangleExample.cpp"
-   @ref textured-triangle/TexturedTriangleShader.cpp "TexturedTriangleShader.cpp"
-   @ref textured-triangle/TexturedTriangleShader.frag "TexturedTriangleShader.frag"
-   @ref textured-triangle/TexturedTriangleShader.h "TexturedTriangleShader.h"
-   @ref textured-triangle/TexturedTriangleShader.vert "TexturedTriangleShader.vert"

The [ports branch](https://github.com/mosra/magnum-examples/tree/ports/src/textured-triangle)
contains additional patches for @ref CORRADE_TARGET_IOS "iOS",
@ref CORRADE_TARGET_ANDROID "Android" and @ref CORRADE_TARGET_EMSCRIPTEN "Emscripten"
support that aren't present in `master` in order to keep the example code as
simple as possible.

@example textured-triangle/CMakeLists.txt @m_examplenavigation{examples-textured-triangle,textured-triangle/} @m_footernavigation
@example textured-triangle/configure.h.cmake @m_examplenavigation{examples-textured-triangle,textured-triangle/} @m_footernavigation
@example textured-triangle/resources.conf @m_examplenavigation{examples-textured-triangle,textured-triangle/} @m_footernavigation
@example textured-triangle/TexturedTriangleExample.cpp @m_examplenavigation{examples-textured-triangle,textured-triangle/} @m_footernavigation
@example textured-triangle/TexturedTriangleShader.cpp @m_examplenavigation{examples-textured-triangle,textured-triangle/} @m_footernavigation
@example textured-triangle/TexturedTriangleShader.frag @m_examplenavigation{examples-textured-triangle,textured-triangle/} @m_footernavigation
@example textured-triangle/TexturedTriangleShader.h @m_examplenavigation{examples-textured-triangle,textured-triangle/} @m_footernavigation
@example textured-triangle/TexturedTriangleShader.vert @m_examplenavigation{examples-textured-triangle,textured-triangle/} @m_footernavigation

*/
}
